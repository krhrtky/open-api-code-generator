openapi: 3.0.3
info:
  title: Conditional Validation Example API
  description: Demonstrates conditional validation features for Issue #4, Sub-Issue 4.2
  version: 1.0.0

paths:
  /users:
    post:
      summary: Create a new user with conditional validation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Conditional validation error

  /users/{userId}/profile:
    put:
      summary: Update user profile with advanced conditional validation
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
        '400':
          description: Conditional validation error

  /accounts:
    post:
      summary: Create account with service-specific validation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
      responses:
        '201':
          description: Account created successfully

components:
  schemas:
    CreateUserRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
        - userType
      properties:
        email:
          type: string
          format: email
          description: User's email address (must be unique)
          x-validation:
            customValidations:
              - EmailUnique
        password:
          type: string
          format: password
          minLength: 8
          description: Password with conditional strength requirements
          x-validation:
            customValidations:
              - StrongPassword
            conditionalValidations:
              - condition: "userType in ['admin', 'superadmin']"
                validations: [StrongPassword]
                message: "Strong password required for admin users"
                priority: 100
        firstName:
          type: string
          minLength: 1
          maxLength: 50
        lastName:
          type: string
          minLength: 1
          maxLength: 50
        userType:
          type: string
          enum: [user, admin, superadmin, guest]
          default: user
        phoneNumber:
          type: string
          format: phone
          description: Phone number (required for verified users)
          x-validation:
            customValidations:
              - PhoneNumber
            conditionalValidations:
              - condition: "verified == true"
                validations: [NotNull, PhoneNumber]
                message: "Phone number is required for verified users"
                priority: 90
        verified:
          type: boolean
          default: false
        age:
          type: integer
          minimum: 13
          maximum: 120
          description: Age verification for certain services
          x-validation:
            conditionalValidations:
              - condition: "serviceType in ['financial', 'gambling', 'adult']"
                validations: [NotNull, Min]
                message: "Age verification required for this service type"
                priority: 85
        serviceType:
          type: string
          enum: [basic, premium, financial, gambling, adult]
          default: basic
        emergencyContact:
          $ref: '#/components/schemas/EmergencyContact'
          description: Emergency contact (required for active users)
          x-validation:
            conditionalValidations:
              - condition: "status == 'ACTIVE'"
                validations: [NotNull]
                message: "Emergency contact is required for active users"
                priority: 100
        status:
          type: string
          enum: [ACTIVE, INACTIVE, PENDING, GUEST]
          default: PENDING

    UpdateProfileRequest:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
        lastName:
          type: string
          minLength: 1
          maxLength: 50
        phoneNumber:
          type: string
          format: phone
          x-validation:
            customValidations:
              - PhoneNumber
        bio:
          type: string
          maxLength: 500
          description: User biography
        preferences:
          $ref: '#/components/schemas/UserPreferences'
        status:
          type: string
          enum: [ACTIVE, INACTIVE, PENDING]
        # Field dependencies example
        emergencyContact:
          $ref: '#/components/schemas/EmergencyContact'
          description: Required when status is ACTIVE, forbidden for GUEST
          x-validation:
            fieldDependencies:
              - sourceField: status
                targetField: emergencyContact
                type: REQUIRED
                condition: "status == 'ACTIVE'"
              - sourceField: status
                targetField: emergencyContact
                type: FORBIDDEN
                condition: "status == 'GUEST'"
        adminNotes:
          type: string
          maxLength: 1000
          description: Admin-only notes (forbidden for regular users)
          x-validation:
            fieldDependencies:
              - sourceField: userType
                targetField: adminNotes
                type: FORBIDDEN
                condition: "userType not in ['admin', 'superadmin']"
        securitySettings:
          $ref: '#/components/schemas/SecuritySettings'
          description: Security settings (required for admin users)
          x-validation:
            conditionalValidations:
              - condition: "userType in ['admin', 'superadmin']"
                validations: [NotNull, Valid]
                message: "Security settings required for admin users"

    CreateAccountRequest:
      type: object
      required:
        - accountType
        - currency
      properties:
        accountType:
          type: string
          enum: [personal, business, premium]
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          description: Three-letter currency code
        minimumBalance:
          type: number
          format: double
          description: Required for premium accounts
          x-validation:
            conditionalValidations:
              - condition: "accountType == 'premium'"
                validations: [NotNull, DecimalMin]
                message: "Minimum balance required for premium accounts"
        businessLicense:
          type: string
          description: Required for business accounts
          x-validation:
            conditionalValidations:
              - condition: "accountType == 'business'"
                validations: [NotNull, Size]
                message: "Business license required for business accounts"
        # Complex conditional validation with multiple conditions
        creditScore:
          type: integer
          minimum: 300
          maximum: 850
          description: Credit score (required for premium accounts or loans over $10000)
          x-validation:
            conditionalValidations:
              - condition: "accountType == 'premium' OR (loanAmount > 10000 AND loanAmount != null)"
                validations: [NotNull, Min, Max]
                message: "Credit score required for premium accounts or large loans"
                priority: 95
        loanAmount:
          type: number
          format: double
          minimum: 0
          description: Optional loan amount
        # Age-dependent features
        parentalConsent:
          type: boolean
          description: Required for users under 18
          x-validation:
            conditionalValidations:
              - condition: "age < 18 AND age is not null"
                validations: [NotNull]
                message: "Parental consent required for users under 18"

    EmergencyContact:
      type: object
      required:
        - name
        - phoneNumber
        - relationship
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        phoneNumber:
          type: string
          format: phone
          x-validation:
            customValidations:
              - PhoneNumber
        relationship:
          type: string
          enum: [PARENT, SIBLING, SPOUSE, FRIEND, OTHER]
        email:
          type: string
          format: email
          description: Optional email for emergency contact
      # Cross-field validation with conditional logic
      x-validation:
        crossFieldValidations:
          - fields: [name, phoneNumber]
            rule: NotSamePerson
            message: "Emergency contact cannot be the same person as the user"
        conditionalValidations:
          - condition: "relationship == 'SPOUSE'"
            validations: [Valid]
            message: "Additional verification required for spouse relationships"

    UserPreferences:
      type: object
      properties:
        theme:
          type: string
          enum: [light, dark, auto]
          default: auto
        language:
          type: string
          pattern: '^[a-z]{2}(-[A-Z]{2})?$'
          default: en
        notifications:
          type: object
          properties:
            email:
              type: boolean
              default: true
            push:
              type: boolean
              default: false
            sms:
              type: boolean
              default: false
              description: SMS notifications (requires phone number)
              x-validation:
                conditionalValidations:
                  - condition: "sms == true"
                    validations: [PhoneNumberRequired]
                    message: "Phone number required to enable SMS notifications"
          required: [email, push, sms]

    SecuritySettings:
      type: object
      required:
        - twoFactorEnabled
        - sessionTimeout
      properties:
        twoFactorEnabled:
          type: boolean
          description: Two-factor authentication
        sessionTimeout:
          type: integer
          minimum: 5
          maximum: 1440
          description: Session timeout in minutes
        allowedIpRanges:
          type: array
          items:
            type: string
            pattern: '^(\d{1,3}\.){3}\d{1,3}(\/\d{1,2})?$'
          description: Allowed IP ranges (required for superadmin)
          x-validation:
            conditionalValidations:
              - condition: "userType == 'superadmin'"
                validations: [NotNull, Size]
                message: "IP range restrictions required for superadmin users"
        passwordPolicy:
          type: object
          properties:
            minLength:
              type: integer
              minimum: 8
              maximum: 128
            requireSpecialChars:
              type: boolean
            requireNumbers:
              type: boolean
            expirationDays:
              type: integer
              minimum: 30
              maximum: 365
          description: Password policy (required for admin users)
          x-validation:
            conditionalValidations:
              - condition: "userType in ['admin', 'superadmin']"
                validations: [NotNull, Valid]
                message: "Password policy configuration required for admin users"

    User:
      type: object
      required:
        - id
        - email
        - firstName
        - lastName
        - userType
        - status
        - verified
        - createdAt
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        userType:
          type: string
          enum: [user, admin, superadmin, guest]
        phoneNumber:
          type: string
          format: phone
        age:
          type: integer
          minimum: 13
          maximum: 120
        serviceType:
          type: string
          enum: [basic, premium, financial, gambling, adult]
        verified:
          type: boolean
        preferences:
          $ref: '#/components/schemas/UserPreferences'
        emergencyContact:
          $ref: '#/components/schemas/EmergencyContact'
        securitySettings:
          $ref: '#/components/schemas/SecuritySettings'
        status:
          type: string
          enum: [ACTIVE, INACTIVE, PENDING, GUEST, SUSPENDED]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []