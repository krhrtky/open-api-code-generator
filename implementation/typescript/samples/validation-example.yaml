openapi: 3.0.3
info:
  title: Advanced Validation Example API
  description: Demonstrates custom validation features for Issue #4
  version: 1.0.0

paths:
  /users:
    post:
      summary: Create a new user with advanced validation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /users/{userId}/profile:
    put:
      summary: Update user profile with conditional validation
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
        '400':
          description: Validation error

components:
  schemas:
    CreateUserRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          minLength: 5
          maxLength: 100
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          description: User's email address (must be unique)
          x-validation:
            customValidations:
              - EmailUnique
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 128
          description: Strong password with complexity requirements
          x-validation:
            customValidations:
              - StrongPassword
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-Z\s\-\'\.]+$'
          description: User's first name
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-Z\s\-\'\.]+$'
          description: User's last name
        phoneNumber:
          type: string
          format: phone
          description: International phone number
          x-validation:
            customValidations:
              - PhoneNumber
        age:
          type: integer
          minimum: 13
          maximum: 120
          description: User's age (must be at least 13)
        terms:
          type: boolean
          description: Terms and conditions acceptance
          x-validation:
            customValidations:
              - MustBeTrue

    UpdateProfileRequest:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-Z\s\-\'\.]+$'
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-Z\s\-\'\.]+$'
        phoneNumber:
          type: string
          format: phone
          x-validation:
            customValidations:
              - PhoneNumber
        bio:
          type: string
          maxLength: 500
          description: User biography
        preferences:
          $ref: '#/components/schemas/UserPreferences'
        status:
          type: string
          enum: [ACTIVE, INACTIVE, PENDING]
          default: ACTIVE
        # Conditional validation example
        emergencyContact:
          $ref: '#/components/schemas/EmergencyContact'
          description: Required when status is ACTIVE
          x-validation:
            conditionalValidations:
              - condition: "status == 'ACTIVE'"
                validations: [NotNull]
                message: "Emergency contact is required for active users"

    UserPreferences:
      type: object
      properties:
        theme:
          type: string
          enum: [light, dark, auto]
          default: auto
        language:
          type: string
          pattern: '^[a-z]{2}(-[A-Z]{2})?$'
          default: en
          description: Language code (e.g., en, en-US)
        notifications:
          type: object
          properties:
            email:
              type: boolean
              default: true
            push:
              type: boolean
              default: false
            sms:
              type: boolean
              default: false
          required: [email, push, sms]

    EmergencyContact:
      type: object
      required:
        - name
        - phoneNumber
        - relationship
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          pattern: '^[a-zA-Z\s\-\'\.]+$'
        phoneNumber:
          type: string
          format: phone
          x-validation:
            customValidations:
              - PhoneNumber
        relationship:
          type: string
          enum: [PARENT, SIBLING, SPOUSE, FRIEND, OTHER]
        email:
          type: string
          format: email
          description: Optional email for emergency contact
      # Cross-field validation example
      x-validation:
        crossFieldValidations:
          - fields: [name, phoneNumber]
            rule: NotSamePerson
            message: "Emergency contact cannot be the same person as the user"

    User:
      type: object
      required:
        - id
        - email
        - firstName
        - lastName
        - createdAt
        - status
      properties:
        id:
          type: integer
          format: int64
          description: Unique user identifier
        email:
          type: string
          format: email
          description: User's email address
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        phoneNumber:
          type: string
          format: phone
          description: User's phone number
        age:
          type: integer
          minimum: 13
          maximum: 120
        preferences:
          $ref: '#/components/schemas/UserPreferences'
        emergencyContact:
          $ref: '#/components/schemas/EmergencyContact'
        status:
          type: string
          enum: [ACTIVE, INACTIVE, PENDING, SUSPENDED]
        createdAt:
          type: string
          format: date-time
          description: User creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    ValidationError:
      type: object
      required:
        - message
        - errors
      properties:
        message:
          type: string
          example: "Validation failed"
        errors:
          type: array
          items:
            type: object
            required:
              - field
              - message
            properties:
              field:
                type: string
                example: "email"
              message:
                type: string
                example: "Email address must be unique"
              code:
                type: string
                example: "UNIQUE_CONSTRAINT_VIOLATION"
              rejectedValue:
                type: string
                example: "test@example.com"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []