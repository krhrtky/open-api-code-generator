openapi: 3.1.0
info:
  title: Comprehensive OpenAPI Test Specification
  description: |
    包括的なOpenAPI機能テスト用の仕様書
    
    この仕様書は以下の機能をテストするために設計されています：
    - 全てのHTTPメソッド
    - 複雑なスキーマ定義
    - 組み合わせスキーマ (allOf, oneOf, anyOf)
    - 高度なバリデーション
    - セキュリティスキーム
    - コールバック（型定義のテスト）
    - リンク（型定義のテスト）
    - 複雑なパラメータ設定
  version: 1.0.0
  contact:
    name: Test API Team
    url: https://example.com/support
    email: test@example.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://example.com/terms

servers:
  - url: https://api.example.com/v1
    description: Production server
    variables:
      port:
        enum: ['443', '8443']
        default: '443'
        description: HTTPS port
  - url: https://staging-api.example.com/v1
    description: Staging server

tags:
  - name: users
    description: User management operations
    externalDocs:
      description: User API Documentation
      url: https://docs.example.com/users
  - name: products
    description: Product catalog operations
  - name: orders
    description: Order management operations
  - name: authentication
    description: Authentication operations

paths:
  # User Management Endpoints
  /users:
    get:
      tags: [users]
      summary: List users with advanced filtering
      description: Retrieve users with complex filtering, sorting, and pagination
      operationId: listUsers
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: sort
          in: query
          description: Sort field and direction
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum: [name, email, createdAt, -name, -email, -createdAt]
        - name: filter
          in: query
          description: Advanced filter
          required: false
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFilter'
        - name: X-Request-ID
          in: header
          description: Request tracking ID
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Users retrieved successfully
          headers:
            X-Total-Count:
              description: Total number of users
              schema:
                type: integer
            X-Page-Count:
              description: Total number of pages
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
              examples:
                sampleUsers:
                  summary: Sample user list
                  value:
                    users:
                      - id: 1
                        email: john@example.com
                        profile:
                          firstName: John
                          lastName: Doe
                    pagination:
                      page: 1
                      limit: 20
                      total: 150
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    
    post:
      tags: [users]
      summary: Create a new user
      description: Create a new user with complex validation
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
          multipart/form-data:
            schema:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/CreateUserRequest'
                avatar:
                  type: string
                  format: binary
                  description: User avatar image
            encoding:
              avatar:
                contentType: image/png, image/jpeg
                headers:
                  X-Upload-Type:
                    schema:
                      type: string
                      enum: [avatar, profile_picture]
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          oneOf:
            - type: integer
              format: int64
              minimum: 1
            - type: string
              pattern: '^usr_[a-zA-Z0-9]{10}$'
        description: User identifier (numeric ID or string ID with usr_ prefix)
    
    get:
      tags: [users]
      summary: Get user by ID
      operationId: getUserById
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      tags: [users]
      summary: Update user (full replacement)
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    
    patch:
      tags: [users]
      summary: Partial user update
      operationId: patchUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUserRequest'
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/JsonPatchOperation'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    
    delete:
      tags: [users]
      summary: Delete user
      operationId: deleteUser
      responses:
        '204':
          description: User deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  # Product Management (Testing complex schemas)
  /products:
    get:
      tags: [products]
      summary: List products
      operationId: listProducts
      parameters:
        - name: category
          in: query
          schema:
            $ref: '#/components/schemas/ProductCategory'
        - name: priceRange
          in: query
          style: deepObject
          explode: true
          schema:
            type: object
            properties:
              min:
                type: number
                format: decimal
              max:
                type: number
                format: decimal
      responses:
        '200':
          description: Products list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  # Orders (Testing callbacks - type definition only)
  /orders:
    post:
      tags: [orders]
      summary: Create order with callback
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          links:
            GetOrderById:
              operationId: getOrderById
              parameters:
                orderId: '$response.body#/id'
      callbacks:
        orderStatusUpdate:
          '{$request.body#/callbackUrl}':
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/OrderStatusCallback'
              responses:
                '200':
                  description: Callback received

  /orders/{orderId}:
    get:
      tags: [orders]
      summary: Get order by ID
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  # Authentication endpoints
  /auth/login:
    post:
      tags: [authentication]
      summary: User login
      operationId: login
      security: []  # No security required for login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      tags: [authentication]
      summary: Refresh token
      operationId: refreshToken
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken:
                  type: string
                  description: Refresh token
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'

components:
  schemas:
    # Basic User Schema with complex validation
    User:
      type: object
      description: User entity with comprehensive validation
      required: [id, email, profile, status, createdAt, updatedAt]
      properties:
        id:
          oneOf:
            - type: integer
              format: int64
              minimum: 1
            - type: string
              pattern: '^usr_[a-zA-Z0-9]{10}$'
          description: User identifier
          readOnly: true
        email:
          type: string
          format: email
          description: User email address
          maxLength: 255
          example: user@example.com
        profile:
          $ref: '#/components/schemas/UserProfile'
        status:
          $ref: '#/components/schemas/UserStatus'
        preferences:
          $ref: '#/components/schemas/UserPreferences'
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          readOnly: true
        version:
          type: integer
          description: Entity version for optimistic locking
          readOnly: true
      example:
        id: 1
        email: john.doe@example.com
        profile:
          firstName: John
          lastName: Doe
          dateOfBirth: "1990-05-15"
        status: active
        createdAt: "2023-01-01T00:00:00Z"
        updatedAt: "2023-12-01T10:30:00Z"

    # Complex Profile Schema using allOf
    UserProfile:
      allOf:
        - $ref: '#/components/schemas/PersonalInfo'
        - $ref: '#/components/schemas/ContactInfo'
        - $ref: '#/components/schemas/AddressInfo'
      description: Complete user profile information

    PersonalInfo:
      type: object
      required: [firstName, lastName]
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-Z\s\-\'\.]+$'
          description: First name
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          pattern: '^[a-zA-Z\s\-\'\.]+$'
          description: Last name
        middleName:
          type: string
          maxLength: 50
          nullable: true
          description: Middle name
        dateOfBirth:
          type: string
          format: date
          description: Date of birth
          example: "1990-05-15"
        gender:
          type: string
          enum: [male, female, other, prefer_not_to_say]
          description: Gender

    ContactInfo:
      type: object
      properties:
        phoneNumber:
          type: string
          pattern: '^[\+]?[1-9][\d]{0,15}$'
          description: Phone number in international format
          example: "+1234567890"
        alternateEmail:
          type: string
          format: email
          nullable: true
          description: Alternative email address

    AddressInfo:
      type: object
      properties:
        addresses:
          type: array
          maxItems: 5
          items:
            $ref: '#/components/schemas/Address'
          description: User addresses

    Address:
      type: object
      required: [type, street, city, country]
      properties:
        type:
          type: string
          enum: [home, work, billing, shipping, other]
        street:
          type: string
          minLength: 1
          maxLength: 200
        city:
          type: string
          minLength: 1
          maxLength: 100
        state:
          type: string
          maxLength: 100
          nullable: true
        postalCode:
          type: string
          pattern: '^[0-9A-Za-z\-\s]{3,20}$'
        country:
          type: string
          pattern: '^[A-Z]{2}$'
          description: ISO 3166-1 alpha-2 country code
          example: "US"
        isDefault:
          type: boolean
          default: false

    # User Status using oneOf
    UserStatus:
      oneOf:
        - type: string
          enum: [active, inactive, suspended, banned]
        - type: object
          properties:
            status:
              type: string
              enum: [pending_verification]
            verificationMethod:
              type: string
              enum: [email, phone, document]
          required: [status, verificationMethod]
      description: User account status

    # User Preferences with anyOf for flexible settings
    UserPreferences:
      type: object
      properties:
        notifications:
          anyOf:
            - type: boolean
            - $ref: '#/components/schemas/NotificationSettings'
          description: Notification preferences
        theme:
          type: string
          enum: [light, dark, auto]
          default: auto
        language:
          type: string
          pattern: '^[a-z]{2}(-[A-Z]{2})?$'
          default: en
          example: en-US

    NotificationSettings:
      type: object
      properties:
        email:
          type: boolean
          default: true
        push:
          type: boolean
          default: true
        sms:
          type: boolean
          default: false
        marketing:
          type: boolean
          default: false

    # Complex filtering schema
    UserFilter:
      type: object
      properties:
        emailDomain:
          type: string
          format: hostname
        registrationDate:
          type: object
          properties:
            from:
              type: string
              format: date
            to:
              type: string
              format: date
        status:
          type: array
          items:
            type: string
            enum: [active, inactive, suspended, banned]
          uniqueItems: true
        hasAddress:
          type: boolean

    # Request schemas
    CreateUserRequest:
      type: object
      required: [email, profile, password]
      properties:
        email:
          type: string
          format: email
          maxLength: 255
        profile:
          $ref: '#/components/schemas/UserProfile'
        password:
          type: string
          minLength: 8
          maxLength: 128
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]+'
          writeOnly: true
          description: Strong password with mixed case, numbers, and symbols
        preferences:
          $ref: '#/components/schemas/UserPreferences'

    UpdateUserRequest:
      allOf:
        - $ref: '#/components/schemas/CreateUserRequest'
        - type: object
          properties:
            version:
              type: integer
              description: Current version for optimistic locking
          required: [version]

    PatchUserRequest:
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/UserProfile'
        preferences:
          $ref: '#/components/schemas/UserPreferences'
      minProperties: 1

    # JSON Patch Operation
    JsonPatchOperation:
      type: object
      required: [op, path]
      properties:
        op:
          type: string
          enum: [add, remove, replace, move, copy, test]
        path:
          type: string
          pattern: '^(/[^/~]*(~[01][^/~]*)*)*$'
        value:
          description: Value for add, replace, and test operations
        from:
          type: string
          description: Source path for move and copy operations

    # Product schemas (testing discriminator)
    Product:
      type: object
      discriminator:
        propertyName: productType
        mapping:
          physical: '#/components/schemas/PhysicalProduct'
          digital: '#/components/schemas/DigitalProduct'
          service: '#/components/schemas/ServiceProduct'
      required: [id, name, productType, price]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
          maxLength: 200
        productType:
          type: string
          enum: [physical, digital, service]
        price:
          $ref: '#/components/schemas/Money'
        description:
          type: string
          maxLength: 1000

    PhysicalProduct:
      allOf:
        - $ref: '#/components/schemas/Product'
        - type: object
          required: [weight, dimensions]
          properties:
            weight:
              type: number
              format: decimal
              minimum: 0
              description: Weight in kilograms
            dimensions:
              $ref: '#/components/schemas/Dimensions'
            category:
              $ref: '#/components/schemas/ProductCategory'

    DigitalProduct:
      allOf:
        - $ref: '#/components/schemas/Product'
        - type: object
          required: [downloadUrl, fileSize]
          properties:
            downloadUrl:
              type: string
              format: uri
              writeOnly: true
            fileSize:
              type: integer
              format: int64
              minimum: 1
              description: File size in bytes
            format:
              type: string
              enum: [pdf, video, audio, software, ebook]

    ServiceProduct:
      allOf:
        - $ref: '#/components/schemas/Product'
        - type: object
          required: [duration, serviceType]
          properties:
            duration:
              type: integer
              minimum: 1
              description: Service duration in minutes
            serviceType:
              type: string
              enum: [consultation, support, training, maintenance]
            location:
              oneOf:
                - type: string
                  enum: [remote, on_site]
                - $ref: '#/components/schemas/Address'

    Dimensions:
      type: object
      required: [length, width, height]
      properties:
        length:
          type: number
          format: decimal
          minimum: 0
        width:
          type: number
          format: decimal
          minimum: 0
        height:
          type: number
          format: decimal
          minimum: 0
        unit:
          type: string
          enum: [cm, in, m, ft]
          default: cm

    ProductCategory:
      type: string
      enum:
        - electronics
        - clothing
        - books
        - home_garden
        - sports
        - automotive
        - health_beauty
        - toys_games
        - food_beverages
        - other

    Money:
      type: object
      required: [amount, currency]
      properties:
        amount:
          type: string
          pattern: '^\d+(\.\d{1,4})?$'
          description: Monetary amount as string to avoid floating point issues
          example: "99.99"
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          description: ISO 4217 currency code
          example: "USD"

    # Order schemas (for callback testing)
    Order:
      type: object
      required: [id, userId, items, status, total, createdAt]
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
        items:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/OrderItem'
        status:
          type: string
          enum: [pending, confirmed, processing, shipped, delivered, cancelled]
        total:
          $ref: '#/components/schemas/Money'
        createdAt:
          type: string
          format: date-time

    OrderItem:
      type: object
      required: [productId, quantity, unitPrice]
      properties:
        productId:
          type: string
          format: uuid
        quantity:
          type: integer
          minimum: 1
        unitPrice:
          $ref: '#/components/schemas/Money'

    CreateOrderRequest:
      type: object
      required: [items, callbackUrl]
      properties:
        items:
          type: array
          minItems: 1
          items:
            type: object
            required: [productId, quantity]
            properties:
              productId:
                type: string
                format: uuid
              quantity:
                type: integer
                minimum: 1
        callbackUrl:
          type: string
          format: uri
          description: URL for order status callbacks

    OrderStatusCallback:
      type: object
      required: [orderId, status, timestamp]
      properties:
        orderId:
          type: string
          format: uuid
        status:
          type: string
          enum: [confirmed, processing, shipped, delivered, cancelled]
        timestamp:
          type: string
          format: date-time
        trackingNumber:
          type: string
          nullable: true

    # Authentication schemas
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: true

    LoginResponse:
      type: object
      required: [accessToken, refreshToken, expiresIn]
      properties:
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: Refresh token
        expiresIn:
          type: integer
          description: Token expiration time in seconds
        user:
          $ref: '#/components/schemas/User'

    # Response schemas
    UserListResponse:
      type: object
      required: [users, pagination]
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    PaginationInfo:
      type: object
      required: [page, limit, total, pages]
      properties:
        page:
          type: integer
          minimum: 1
          description: Current page number
        limit:
          type: integer
          minimum: 1
          description: Items per page
        total:
          type: integer
          minimum: 0
          description: Total number of items
        pages:
          type: integer
          minimum: 0
          description: Total number of pages
        hasNext:
          type: boolean
          description: Whether there is a next page
        hasPrevious:
          type: boolean
          description: Whether there is a previous page

    ErrorResponse:
      type: object
      required: [error, message, timestamp]
      properties:
        error:
          type: string
          description: Error code
          example: "USER_NOT_FOUND"
        message:
          type: string
          description: Human-readable error message
          example: "User with the specified ID was not found"
        timestamp:
          type: string
          format: date-time
          description: Error occurrence timestamp
        details:
          type: array
          items:
            type: string
          description: Additional error details
        requestId:
          type: string
          format: uuid
          description: Request identifier for tracking

    ValidationError:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            validationErrors:
              type: array
              items:
                type: object
                required: [field, message]
                properties:
                  field:
                    type: string
                    description: Field name that failed validation
                  message:
                    type: string
                    description: Validation error message
                  code:
                    type: string
                    description: Validation error code

  responses:
    BadRequest:
      description: Bad request - validation errors
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "UNAUTHORIZED"
            message: "Authentication required"
            timestamp: "2023-12-01T10:30:00Z"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "NOT_FOUND"
            message: "The requested resource was not found"
            timestamp: "2023-12-01T10:30:00Z"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  parameters:
    PageParam:
      name: page
      in: query
      description: Page number for pagination
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1

    LimitParam:
      name: limit
      in: query
      description: Number of items per page
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

    UserIdParam:
      name: userId
      in: path
      required: true
      description: User identifier
      schema:
        oneOf:
          - type: integer
            format: int64
            minimum: 1
          - type: string
            pattern: '^usr_[a-zA-Z0-9]{10}$'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token authentication

    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key authentication

    oauth2:
      type: oauth2
      description: OAuth2 authentication
      flows:
        authorizationCode:
          authorizationUrl: https://auth.example.com/oauth/authorize
          tokenUrl: https://auth.example.com/oauth/token
          refreshUrl: https://auth.example.com/oauth/refresh
          scopes:
            read: Read access to resources
            write: Write access to resources
            admin: Administrative access
        clientCredentials:
          tokenUrl: https://auth.example.com/oauth/token
          scopes:
            api: API access
        implicit:
          authorizationUrl: https://auth.example.com/oauth/authorize
          scopes:
            read: Read access to resources

    openIdConnect:
      type: openIdConnect
      openIdConnectUrl: https://auth.example.com/.well-known/openid_configuration

  examples:
    UserExample:
      summary: Sample user
      description: A typical user example
      value:
        id: 1
        email: "john.doe@example.com"
        profile:
          firstName: "John"
          lastName: "Doe"
          dateOfBirth: "1990-05-15"
        status: "active"

    ProductExample:
      summary: Sample physical product
      value:
        id: "550e8400-e29b-41d4-a716-446655440000"
        name: "Wireless Headphones"
        productType: "physical"
        price:
          amount: "99.99"
          currency: "USD"
        weight: 0.25
        dimensions:
          length: 20
          width: 15
          height: 8
          unit: "cm"

  headers:
    X-Rate-Limit:
      description: API rate limit
      schema:
        type: integer
      example: 1000

    X-Rate-Limit-Remaining:
      description: Remaining API calls
      schema:
        type: integer
      example: 999

  links:
    GetUserByUserId:
      operationId: getUserById
      parameters:
        userId: '$response.body#/id'
      description: Get user details using the returned user ID

    UpdateUserByUserId:
      operationId: updateUser
      parameters:
        userId: '$response.body#/id'
      description: Update user using the returned user ID

security:
  - bearerAuth: []
  - apiKeyAuth: []

externalDocs:
  description: Find more info here
  url: https://docs.example.com